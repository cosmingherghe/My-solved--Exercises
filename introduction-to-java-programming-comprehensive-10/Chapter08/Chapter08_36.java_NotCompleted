/**  (Latin square) A Latin square is an n-by-n array filled with n different Latin letters,
  *  each occurring exactly once in each row and once in each column. Write a 
  *  program that prompts the user to enter the number n and the array of characters,
  *  as shown in the sample output, and checks if the input array is a Latin square.
  *  The characters are the first n characters starting from A.
  * 
  *  Enter number n: 4
  *  Enter 4 rows of letters separated by spaces:
  *  A B C D
  *  B A D C
  *  C D B A
  *  D C A B
  *  The input array is a Latin square
  * 
  * 
  *  Enter number n: 3
  *  Enter 3 rows of letters separated by spaces:
  *  A F D
  *  Wrong input: the letters must be from A to C
  * 
  */

import java.util.*;
import java.io.*;

public class LatinSquare {
	public static void main(String[] args) {

		Scanner input = new Scanner(System.in);
		String keyBoardInput = "";
		int n;

		System.out.print("Enter number n: ");
		n= input.nextInt(); 
		
		char[][] matrix = new char[n][n];
		System.out.printf("Enter %d rows of capital letters separated by spaces:\n", n);

  		for (int i = 0; i < n; i++) { 
  		
  			if(i == 0) {
	  			keyBoardInput = input.nextLine();
	  			keyBoardInput = input.nextLine();
				if( checkLatinSquare(keyBoardInput, matrix, i) )
						break; 
			}
			else {
				keyBoardInput = input.nextLine(); 
				if( checkLatinSquare(keyBoardInput, matrix, i) )
						break; 
			}
		}
		
	}
	 

	public static boolean checkLatinSquare(String input, char[][] mtrx, int rowNumber) {

		char[] letters = input.replaceAll(" ", "").toCharArray(); //delete spaces & create char array
		 
		//check for letters to be in the range 
		for (int i = 0; i < letters.length; i++) {
			if( letters[i] > ('A' + mtrx.length - 1) ) {
				System.out.println("Wrong input: the letters must be from A to " + (char)('A' + mtrx.length - 1) );
				return true;
			}
		}
		
		//check column for duplicate letters
		for (int i = 0; i < letters.length; i++) {
			for (int j = i + 1; j < letters.length; j++) {
 				if( letters[i] == letters[j] ) {
 					System.out.println("Wrong input: the letters must each occurring exactly once in each row" );
					return true;
				}
			}
		}
		
		
		//(IF letters in range & no duplicates letters in the input)
		//add line of letters to matrix row
		for (int i = 0; i < letters.length; i++) {
 				 mtrx[rowNumber][i] = letters[i]; 
		}

		//check rows for duplicate letters
		if(rowNumber > 0) {  //if there are more than 2 rows

			for (int i = 0; i < rowNumber; i++) {
				System.out.println(i + ">i>"); // TEST
				
				for (int z = rowNumber; 0 < z; z--) {
					System.out.println(""); // TEST
					
					for (int j = 0; j < mtrx.length; j++) {
						System.out.println( i +""+ j + " != " + z + "" + j ); //TEST
		 				if( mtrx[i][j] == mtrx[z][j] ) {
		 					System.out.println("Wrong input: the letters must each occurring exactly once in each column" );
		 					return true;
		 				}
					}
				}
			}
		}//end IF
		
		return false;		
	} 
}
